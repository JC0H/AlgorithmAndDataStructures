---------------------------------------Remove from the beginning.-------------------------------------------------------------
Next, suppose that you want to remove the first node from a list. This operation is even easier: simply assign to first the value
first.next. Normally, you would retrieve the value of the item (by assigning it to some variable of type Item) before doing this
assignment, because once you change the value of first, you may not have any access to the node to which it was referring.
Typically, the node object becomes an orphan, and the Java memory management system eventually reclaims the memory it occupies.
Again, this operation just involves one assignment statement, so its running time is independent of the length of the list.

Removing the first node in a linked list
 first = first.next;

-----------------------------------------Insert at the beginning.---------------------------------------------------------------
First, suppose that you want to insert a new node into a linked list. The easiest place to do so is at the beginning of the list.
For example, to insert the string not at the beginning of a given linked list whose first node is first, we save first in oldfirst,
assign to first a new Node, and assign its item field to not and its next field to oldfirst. This code for inserting a node at
the beginning of a linked list involves just a few assignment statements, so the amount of time that it takes is independent
of the length of the list.

save a link to the list:      create a new node for the beginning       set the instance variables in the new node
 Node oldfirst = first;         first = new Node();                       first.item = "not";
                                                                          first.next = oldfirst;

-----------------------------------------Insert at the end.---------------------------------------------------------------------
How do we add a node to the end of a linked list? To do so, we need a link to the last node in the list, because that nodeâ€™s link
has to be changed to reference a new node containing the item to be inserted. Maintaining an extra link is not something that
should be taken lightly in linked-list code, because every method that modifies the list needs code to check whether that variable
needs to be modified (and to make the necessary modifications). For example, the code that we just examined for removing the first
node in the list might involve changing the reference to the last node in the list, since when there is only one node in the list,
it is both the first one and the last one! Also, this code does not work (it follows a null link) in the case that the list is empty.
Details like these make linked-list code notoriously difficult to debug.

save a link to the last node   create a new node for the end            link the new node to the end of the list
Node oldlast = last              Node last = new Node();                  oldlast.next = last;
                                 last.item = "not";
